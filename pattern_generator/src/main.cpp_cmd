/*
 * Copyright (c) 2017-2018 Biasiotto Riccardo
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * See the File README and COPYING for more detail about License
 *
*/

#include "ofMain.h"
#include "ofApp.h"

int usage(const char* name)
{
	printf("%s  \n", name);
	printf("      %s <output format> <rgb quant range> <colorimetry> <YCC Encoding> <isHDR> <isDolby> <is_std_Dolby> <eotf> <hdr_primaries> <Max Fall> <Max Cll> <Max luma> <Min luma> <max bpc> <mode_idx>\n", name);
	printf("\n");
	printf("        HDR metadata is in NITS\n");
	printf("\n");
	printf("        Output format values:\n");
	printf("\n");
	printf("	  RGB444   = 0\n");
	printf("	  YCrCb444 = 1\n");
	printf("	  YCrCb422 = 2\n");
	printf("	  YCrCb420 = 3\n");
	printf("\n");
	printf("        RGB Quant Range values:\n");
	printf("\n");
	printf("	  Default          = 0\n");
	printf("	  Limited [16-235] = 1\n");
	printf("	  Full [0-255]     = 2\n");
	printf("	  Reserved         = 3\n");
	printf("\n");
	printf("        isHDR = 1 is on, isHDR = 0 is off \n");
	printf("        isDolby = 1 is on, isDolby = 0 is off (**both isHDR and isDolby must be set to 1 for Dolby**) \n");
	printf("        is_std_Dolby = 1 is on, is_std_Dolby = 0 is off (**both isHDR and isDolby must be set to 1 for is_std_Dolby**) \n");
	printf("        isHDR = 0, isDolby = 0 is SDR \n");
	printf("\n");
	printf("        EOTF \n");
	printf("	  Traditional Gamma-SDR Luminance Range  = 0\n");
	printf("	  raditional Gamma-HDR Luminance Range   = 1\n");
	printf("	  SMPTE ST 2084    						 = 2\n");
	printf("	  Hybrid Log-Gamma (HLG)   		 		 = 3\n");
	printf("	  Reserved for future use				 = 4\n");
	printf("	  Reserved for future use				 = 5\n");
	printf("\n");
	printf("        hdr_primaries \n");
	printf("	  Display Gamut Rec709        		 = 0\n");
	printf("	  Display Gamut Rec2020      		 = 1\n");
	printf("	  Display Gamut P3D65         		 = 2\n");
	printf("	  Display Gamut P3DCI(Theater)		 = 3\n");
	printf("	  Display Gamut P3D60(ACES Cinema)	 = 4\n");
	printf("\n");
	printf("      Max bpc range 8 - 12\n");
	printf("\n");
	printf("      Mode index set by modeset automatically\n");
	printf("\n");
	printf("Example:\n");
	printf("  %s 0 2 1 1 0 2 300 4000 10000 1 10 0", name);
	printf(" ==>  Sets PGenerator to RGB444, Full range[0-255], HDR, LLDV, 300 MaxFall, 4000 MaxCll, 10000 max lum, 1 min lum, 10 bit\n");
	return 0;
}
 

int main(int argc, char **argv){
 int w=4096;
 int h=2160;
 int ok=0;
 std::string str;
 /* Check Distro */
 if(boost::filesystem::exists("/etc/BiasiLinux/system_info"))       ok++;
 if(boost::filesystem::exists("/etc/BiasiLinux/packages.conf"))     ok++;
 if(boost::filesystem::exists("/etc/BiasiLinux/boot_device.conf"))  ok++;
 if(boost::filesystem::exists("/var/lib/BiasiLinux/PGenerator"))    ok++;
 if(boost::filesystem::exists("/var/lib/BiasiLinux/linux"))         ok++;
 if(boost::filesystem::exists("/usr/bin/pkg"))                      ok++;
 if(boost::filesystem::exists("/usr/bin/rcset"))                    ok++;
 if(boost::filesystem::exists("/usr/bin/bootloader"))               ok++;
 if(boost::filesystem::exists("/proc/device-tree/model"))           ok++;
 if(ok != 9 ) {
  printf("\nOnly on Distro BiasiLinux with PGenerator installed can be executed this program!\n\n");
  exit(1);
 }
 /* Check Device */
 ok=0;
 std::ifstream file("/proc/device-tree/model");
 std::getline(file, str);
 file.close();
 if (str.find("Raspberry") == string::npos) {
  printf("\nOnly on Raspberry Device can be executed this program!\n\n");
  exit(1);
 } 
 /* Continue */
	ofSetLogLevel(OF_LOG_VERBOSE);
 if(argc < 2)
	return usage(argv[0]); 
 if(argc > 1) {
 // w=atoi(argv[1]);
 // h=atoi(argv[2]);
	ofxRPI4Window::avi_info.output_format=atoi(argv[1]);
	ofxRPI4Window::avi_info.rgb_quant_range=atoi(argv[2]);
	ofxRPI4Window::avi_info.colorimetry=atoi(argv[3]);
	ofxRPI4Window::avi_info.c_enc=atoi(argv[4]);
	ofxRPI4Window::isHDR=atoi(argv[5]);
	ofxRPI4Window::isDoVi=atoi(argv[6]);
	ofxRPI4Window::is_std_DoVi=atoi(argv[7]);
	ofxRPI4Window::eotf=(static_cast<hdmi_eotf>(atoi(argv[8])));
	ofxRPI4Window::hdr_primaries=atoi(argv[9]);
	ofxRPI4Window::hdr_metadata.hdmi_metadata_type1.max_fall=atof(argv[10]);
	ofxRPI4Window::hdr_metadata.hdmi_metadata_type1.max_cll=atof(argv[11]);
	ofxRPI4Window::hdr_metadata.hdmi_metadata_type1.max_display_mastering_luminance=atof(argv[12]);
	ofxRPI4Window::hdr_metadata.hdmi_metadata_type1.min_display_mastering_luminance=atof(argv[13]);
    ofxRPI4Window::avi_info.max_bpc=atoi(argv[14]);
	ofxRPI4Window::mode_idx=atoi(argv[15]);
 } 

#ifdef USE_X
	ofSetupOpenGL(w,h, OF_FULLSCREEN);
	ofRunApp( new ofApp());
#endif
	ofGLESWindowSettings settings;
	settings.glesVersion = 3;
	ofApp *cs_data;
	cs_data = new ofApp();
	cs_data->update();
	
    auto window = std::make_shared<ofxRPI4Window>(settings);
//    auto hdr = std::make_shared<ofxTinyEXR>();
    auto app = std::make_shared<ofApp>();

	delete cs_data;

//	ofCreateWindow(settings);
    ofRunApp(window, app);

	
	// this kicks off the running of my app
	// can be OF_WINDOW or OF_FULLSCREEN
	// pass in width and height too:
	//ofRunApp(new ofApp());
    ofRunMainLoop();

} 